{"version":3,"sources":["../../src/load_setlists.js"],"names":["loadSetlists","mbid","pool","setlistFm","axios","create","baseURL","headers","ApiKey","Accept","addSetlists","newSetlists","insertSetlistsIntoDatabase","get","then","response","setlists","data","setlist","itemsPerPage","total","lastPage","Math","ceil","currentPage","handleError","console","log","intervalId","setInterval","clearInterval","catch","err","error","forEach","artist","currentArtistId","id","insertIntoTable","name","sortName","tmid","city","venue","coordinates","coords","country","state","stateCode","long","lat","code","sets","set","artistId","song","cover","songToSongId","setlist_songs","setlist_songs_infos","encores","encores_infos","encore","push","map","info","maxLength","set_songs","length","i","setLength","Array","fill","songs","songId","replace","coverArtistName","coverArtistSortName","versionId","eventDateToDate","eventDate","Date","lastUpdated","toISOString","tour","url","dateStr","split","day","month","year","table","values","placeholders","x","index","toString","join","Promise","resolve","reject","connect","client","query","queryError","release"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {ApiKey} from \"./keys\";\n\n\nfunction loadSetlists(mbid, pool) {\n    const setlistFm = axios.create({\n        baseURL: 'https://api.setlist.fm/rest/1.0/artist/' + mbid + \"/setlists\",\n        headers: {\n            'x-api-key': ApiKey,\n            Accept: 'application/json',\n        },\n    });\n\n    function addSetlists(newSetlists) {\n        if (newSetlists) {\n            insertSetlistsIntoDatabase(newSetlists, pool);\n        }\n    }\n\n    setlistFm.get(\"/?p=1\").then((response) => {\n        const setlists = response.data.setlist;\n        const itemsPerPage = response.data.itemsPerPage;\n        const total = response.data.total;\n\n        addSetlists(setlists);\n\n        const lastPage = Math.ceil(total / itemsPerPage);\n        let currentPage = 2;\n        if (lastPage) {\n            const handleError = () => {\n                console.log(\"Setlist fm fetch error\");\n            };\n\n            const intervalId = setInterval(() => {\n                if (currentPage > lastPage) {\n                    clearInterval(intervalId);\n                    return;\n                }\n                setlistFm.get(\"/?p=\" + currentPage)\n                    .then((response) => addSetlists(response.data.setlist))\n                    .catch((err) => handleError(err));\n                currentPage += 1;\n            }, 500);\n        }\n    }).catch((error) => console.log(error));\n}\n\n\nfunction insertSetlistsIntoDatabase(setlists, pool) {\n    const handleError = (err) => {\n        console.log(err);\n    };\n\n    setlists.forEach((setlist) => {\n        const artist = setlist.artist;\n        const currentArtistId = artist.mbid;\n        console.log(setlist.id);\n        insertIntoTable(\"Artist\", [artist.mbid, artist.name, artist.sortName, artist.tmid], pool).then(() => {\n            const city = setlist.venue.city;\n            const coordinates = city.coords;\n            const country = city.country;\n            insertIntoTable(\"City\", [city.id, city.name, city.state, city.stateCode,\n                    coordinates.long, coordinates.lat, country.code, country.name], pool).then(() => {\n                const venue = setlist.venue;\n                insertIntoTable(\"Venue\", [venue.id, venue.name, city.id], pool).catch(handleError);\n\n                const sets = setlist.sets.set;\n                if (sets) {\n                    const artistId = (song) => {\n                        return (song && song.cover && song.cover.mbid) || currentArtistId;\n                    };\n\n                    const songToSongId = (song) => {\n                        const name = song.name;\n                        return artistId(song) + \"==\" + name;\n                    };\n\n                    const setlist_songs = [];\n                    const setlist_songs_infos = [];\n                    const encores = [];\n                    const encores_infos = [];\n                    sets.forEach((set) => {\n                        const encore = set.encore;\n                        if (encore) {\n                            encores.push(...set.song.map(song => songToSongId(song)));\n                            encores_infos.push(...set.song.map(song => song.info));\n                        } else {\n                            setlist_songs.push(set.song.map(song => songToSongId(song)));\n                            setlist_songs_infos.push(set.song.map(song => song.info))\n                        }\n\n                        let maxLength = 0;\n                        setlist_songs.forEach(set_songs => {\n                            if (set_songs.length > maxLength) {\n                                maxLength = set_songs.length;\n                            }\n                        });\n\n                        for (let i = 0; i < setlist_songs.length; i++) {\n                            const setLength = setlist_songs[i].length;\n                            if (setLength < maxLength) {\n                                setlist_songs[i].push(...Array(maxLength - setLength).fill(null));\n                                setlist_songs_infos[i].push(...Array(maxLength - setLength).fill(null));\n                            }\n                        }\n\n                        const songs = set.song;\n                        songs.forEach(song => {\n                            const name = song.name;\n                            const songId = name.replace(\" \", \"_\") + \"==\" + artistId(song);\n                            if (artistId(song) !== currentArtistId) {\n                                const coverArtistName = song.cover.name;\n                                const coverArtistSortName = song.cover.sortName;\n                                insertIntoTable('Artist', [artistId(song), coverArtistName,\n                                    coverArtistSortName, song.cover.tmid], pool).then(() => {\n                                    insertIntoTable('Song', [songId, name, artistId(song)], pool).catch(handleError);\n                                }).catch(handleError);\n                            } else {\n                                insertIntoTable('Song', [songId, name, artistId(song)], pool).catch(handleError);\n                            }\n                        });\n                    });\n\n\n                    insertIntoTable('Setlist', [setlist.id, setlist.versionId, eventDateToDate(setlist.eventDate),\n                        new Date(setlist.lastUpdated).toISOString(), setlist_songs, encores, currentArtistId, setlist.tour.name,\n                        setlist_songs_infos, encores_infos, setlist.info, setlist.url], pool).catch(handleError);\n                }\n            }).catch(handleError);\n        }).catch(handleError);\n    });\n}\n\n\nfunction eventDateToDate(dateStr) {\n    const [day, month, year] = dateStr.split(\"-\");\n    return new Date(year, month - 1, day).toISOString();\n}\n\n\nfunction insertIntoTable(table, values, pool) {\n    const placeholders = values.map((x, index) => \"$\" + (index + 1).toString()).join();\n\n\n    return new Promise((resolve, reject) => {\n        pool.connect().then((client) => {\n            client.query('INSERT INTO \"public\".\"' + table + '\" VALUES (' + placeholders + \") ON CONFLICT DO NOTHING;\", values, (queryError) => {\n                client.release();\n                if (queryError) {\n                    reject(queryError);\n                } else {\n                    resolve();\n                }\n            });\n        }).catch(() => console.log(\"Connection error\"));\n    });\n}\n\n\nexport default loadSetlists;"],"file":"load_setlists.js"}