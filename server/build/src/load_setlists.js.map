{"version":3,"sources":["../../src/load_setlists.js"],"names":["loadSetlists","mbid","pool","setlistFm","axios","create","baseURL","headers","ApiKey","Accept","addSetlists","newSetlists","insertSetlistsIntoDatabase","get","then","response","setlists","data","setlist","itemsPerPage","total","lastPage","Math","ceil","currentPage","handleError","console","log","intervalId","setInterval","clearInterval","catch","err","error","forEach","artist","currentArtistId","id","insertIntoTable","name","sortName","tmid","city","venue","coordinates","coords","country","state","stateCode","long","lat","code","sets","set","songToArtistId","song","cover","songToSongId","encoreIndex","index","encore","setId","setName","versionId","eventDateToDate","eventDate","Date","lastUpdated","toISOString","tour","info","url","Boolean","map","songs","songId","artistId","addToSongAndSetSong","coverArtistName","coverArtistSortName","dateStr","split","day","month","year","table","values","placeholders","x","toString","join","Promise","resolve","reject","connect","client","query","queryError","release"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {ApiKey} from \"./keys\";\nimport uuid from 'uuid/v4';\n\n\nfunction loadSetlists(mbid, pool) {\n    const setlistFm = axios.create({\n        baseURL: 'https://api.setlist.fm/rest/1.0/artist/' + mbid + \"/setlists\",\n        headers: {\n            'x-api-key': ApiKey,\n            Accept: 'application/json',\n        },\n    });\n\n    function addSetlists(newSetlists) {\n        if (newSetlists) {\n            insertSetlistsIntoDatabase(newSetlists, pool);\n        }\n    }\n\n    setlistFm.get(\"/?p=1\").then((response) => {\n        const setlists = response.data.setlist;\n        const itemsPerPage = response.data.itemsPerPage;\n        const total = response.data.total;\n\n        addSetlists(setlists);\n\n        const lastPage = Math.ceil(total / itemsPerPage);\n        let currentPage = 2;\n        if (lastPage) {\n            const handleError = () => {\n                console.log(\"Setlist fm fetch error\");\n            };\n\n            const intervalId = setInterval(() => {\n                if (currentPage > lastPage) {\n                    clearInterval(intervalId);\n                    return;\n                }\n                setlistFm.get(\"/?p=\" + currentPage)\n                    .then((response) => addSetlists(response.data.setlist))\n                    .catch((err) => handleError(err));\n                currentPage += 1;\n            }, 500);\n        }\n    }).catch((error) => console.log(error));\n}\n\n\nfunction insertSetlistsIntoDatabase(setlists, pool) {\n    const handleError = (err) => {\n        console.log(err);\n    };\n\n    setlists.forEach((setlist) => {\n        const artist = setlist.artist;\n        const currentArtistId = artist.mbid;\n        console.log(setlist.id);\n        insertIntoTable(\"Artist\", [artist.mbid, artist.name, artist.sortName, artist.tmid], pool).then(() => {\n            const city = setlist.venue.city;\n            const coordinates = city.coords;\n            const country = city.country;\n            insertIntoTable(\"City\", [city.id, city.name, city.state, city.stateCode,\n                    coordinates.long, coordinates.lat, country.code, country.name], pool).then(() => {\n                const venue = setlist.venue;\n                insertIntoTable(\"Venue\", [venue.id, venue.name, city.id], pool).catch(handleError).then(() =>{\n                    const sets = setlist.sets.set;\n                    if (sets) {\n                        const songToArtistId = (song) => {\n                            return (song && song.cover && song.cover.mbid) || currentArtistId;\n                        };\n\n                        const songToSongId = (song) => {\n                            const name = song.name;\n                            return name + \"=!=\" + songToArtistId(song);\n                        };\n\n                        let encoreIndex = 1;\n                        sets.forEach((set, index) => {\n                            const encore = set.encore;\n                            const setId = uuid();\n                            let setName;\n                            if (encore) {\n                                setName = \"Encore \" + encoreIndex;\n                                encoreIndex += 1;\n                            } else {\n                                setName = \"Set \" + (index + 1);\n                            }\n                            insertIntoTable('Setlist', [setlist.id, setlist.versionId, eventDateToDate(setlist.eventDate),\n                                    new Date(setlist.lastUpdated).toISOString(), currentArtistId, setlist.tour.name,\n                                    setlist.info, setlist.url, venue.id], pool).catch(handleError).then(() => {\n                                insertIntoTable('Set', [setId, setName, Boolean(encore), set.song.map(song => song.info), setlist.id], pool).catch(handleError).then(() => {\n                                    const songs = set.song;\n                                    songs.forEach(song => {\n                                        const name = song.name;\n                                        const songId = songToSongId(song);\n                                        const artistId = songToArtistId(song);\n                                        function addToSongAndSetSong() {\n                                            if (name) {\n                                                insertIntoTable('Song', [songId, name, artistId], pool).catch(handleError).then(() => {\n                                                    insertIntoTable('Set_Song', [setId, songId], pool).catch(handleError);\n                                                });\n                                            }\n                                        }\n\n                                        if (artistId !== currentArtistId) {\n                                            const coverArtistName = song.cover.name;\n                                            const coverArtistSortName = song.cover.sortName;\n                                            insertIntoTable('Artist', [artistId, coverArtistName,\n                                                coverArtistSortName, song.cover.tmid], pool).then(() => {\n                                                    addToSongAndSetSong();\n                                            }).catch(handleError);\n                                        } else {\n                                            addToSongAndSetSong();\n                                        }\n                                    });\n                                });\n                            });\n                        });\n                    }\n                });\n            }).catch(handleError);\n        }).catch(handleError);\n    });\n}\n\n\nfunction eventDateToDate(dateStr) {\n    const [day, month, year] = dateStr.split(\"-\");\n    return new Date(year, month - 1, day).toISOString();\n}\n\n\nfunction insertIntoTable(table, values, pool) {\n    const placeholders = values.map((x, index) => \"$\" + (index + 1).toString()).join();\n\n\n    return new Promise((resolve, reject) => {\n        pool.connect().then((client) => {\n            client.query('INSERT INTO \"public\".\"' + table + '\" VALUES (' + placeholders + \") ON CONFLICT DO NOTHING;\", values, (queryError) => {\n                client.release();\n                if (queryError) {\n                    reject(queryError);\n                } else {\n                    resolve();\n                }\n            });\n        }).catch(() => console.log(\"Connection error\"));\n    });\n}\n\n\nexport default loadSetlists;"],"file":"load_setlists.js"}