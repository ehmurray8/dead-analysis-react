{"version":3,"sources":["../../src/search_artist.js"],"names":["setlistFm","axios","create","baseURL","headers","ApiKey","Accept","searchArtist","artistName","pool","Promise","resolve","reject","get","then","response","artists","data","artist","console","log","all","map","dataLoaded","hasData","err","catch","connect","client","query","queryError","release","results","rows","row","artist_id","includes","mbid"],"mappings":";;;;;;;;;AAAA;;AACA;;;;;;;;AAGA,IAAMA,SAAS,GAAGC,eAAMC,MAAN,CAAa;AAC3BC,EAAAA,OAAO,EAAE,gDADkB;AAE3BC,EAAAA,OAAO,EAAE;AACL,iBAAaC,YADR;AAELC,IAAAA,MAAM,EAAE;AAFH;AAFkB,CAAb,CAAlB;;AASA,SAASC,YAAT,CAAsBC,UAAtB,EAAkCC,IAAlC,EAAwC;AACpC,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCZ,IAAAA,SAAS,CAACa,GAAV,CAAc,iBAAiBL,UAA/B,EAA2CM,IAA3C,CAAgD,UAACC,QAAD,EAAc;AAC1D,UAAIC,OAAO,GAAGD,QAAQ,CAACE,IAAT,CAAcC,MAA5B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;;AACA,UAAI;AACAA,QAAAA,OAAO,GAAGN,OAAO,CAACW,GAAR,CAAYL,OAAO,CAACM,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAY,iBAAOJ,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAEvBA,MAFuB;AAAA;AAAA,2BAGXK,UAAU,CAACL,MAAD,EAAST,IAAT,CAHC;;AAAA;AAAA;AAAA;AAG1Be,sBAAAA,OAH0B;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAZ;;AAAA;AAAA;AAAA;AAAA,YAAZ,CAAV;AAMH,OAPD,CAOE,OAAOC,GAAP,EAAY;AACVN,QAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACA,eAAOT,OAAP;AACH;;AACDL,MAAAA,OAAO,CAACK,OAAD,CAAP;AACH,KAfD,EAeGU,KAfH,CAeS,UAACD,GAAD;AAAA,aAASb,MAAM,CAACa,GAAD,CAAf;AAAA,KAfT;AAgBH,GAjBM,CAAP;AAkBH;;AAGD,SAASF,UAAT,CAAoBL,MAApB,EAA4BT,IAA5B,EAAkC;AAC9B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCH,IAAAA,IAAI,CAACkB,OAAL,GAAeb,IAAf,CAAoB,UAACc,MAAD,EAAY;AAC5BA,MAAAA,MAAM,CAACC,KAAP,CAAa,mDAAb,EAAkE,UAACC,UAAD,EAAaf,QAAb,EAA0B;AACxFa,QAAAA,MAAM,CAACG,OAAP;;AACA,YAAID,UAAJ,EAAgB;AACZlB,UAAAA,MAAM,CAACkB,UAAD,CAAN;AACH,SAFD,MAEO;AACH,cAAME,OAAO,GAAGjB,QAAQ,CAACkB,IAAT,CAAcX,GAAd,CAAkB,UAAAY,GAAG;AAAA,mBAAIA,GAAG,CAACC,SAAR;AAAA,WAArB,CAAhB;AACAxB,UAAAA,OAAO,CAACqB,OAAO,CAACI,QAAR,CAAiBlB,MAAM,CAACmB,IAAxB,CAAD,CAAP;AACH;AACJ,OARD;AASH,KAVD,EAUGX,KAVH,CAUS;AAAA,aAAMP,OAAO,CAACC,GAAR,CAAY,kBAAZ,CAAN;AAAA,KAVT;AAWH,GAZM,CAAP;AAaH;;eAGcb,Y","sourcesContent":["import axios from 'axios';\nimport {ApiKey} from './keys';\n\n\nconst setlistFm = axios.create({\n    baseURL: 'https://api.setlist.fm/rest/1.0/search/artists',\n    headers: {\n        'x-api-key': ApiKey,\n        Accept: 'application/json',\n    },\n});\n\n\nfunction searchArtist(artistName, pool) {\n    return new Promise((resolve, reject) => {\n        setlistFm.get('?artistName=' + artistName).then((response) => {\n            let artists = response.data.artist;\n            console.log(artists);\n            try {\n                artists = Promise.all(artists.map(async (artist) => {\n                    return {\n                        ...artist,\n                        hasData: await dataLoaded(artist, pool)\n                    }\n                }));\n            } catch (err) {\n                console.log(err);\n                return artists;\n            }\n            resolve(artists);\n        }).catch((err) => reject(err));\n    });\n}\n\n\nfunction dataLoaded(artist, pool) {\n    return new Promise((resolve, reject) => {\n        pool.connect().then((client) => {\n            client.query('SELECT DISTINCT artist_id FROM \"public\".\"Setlist\"', (queryError, response) => {\n                client.release();\n                if (queryError) {\n                    reject(queryError);\n                } else {\n                    const results = response.rows.map(row => row.artist_id);\n                    resolve(results.includes(artist.mbid));\n                }\n            });\n        }).catch(() => console.log(\"Connection error\"));\n    });\n}\n\n\nexport default searchArtist;\n\n"],"file":"search_artist.js"}