{"version":3,"sources":["../../src/database_queries.js"],"names":["getAllSongs","pool","artistId","query","getAllOriginals","getAllCovers","getAllSetlistsBySong","songId","replace","getSetlistInfo","setlistId","queryString","Promise","resolve","reject","connect","then","client","queryError","response","release","results","rows","catch","console","log"],"mappings":";;;;;;;;;;;AAAO,SAASA,WAAT,CAAqBC,IAArB,EAA2BC,QAA3B,EAAqC;AACxC,SAAOC,KAAK,CAACF,IAAD,+ZASmCC,QATnC,6RAAZ;AAgBH;;AAGM,SAASE,eAAT,CAAyBH,IAAzB,EAA+BC,QAA/B,EAAyC;AAC5C,SAAOC,KAAK,CAACF,IAAD,+ZASmCC,QATnC,qPAYgDA,QAZhD,iFAAZ;AAgBH;;AAGM,SAASG,YAAT,CAAsBJ,IAAtB,EAA4BC,QAA5B,EAAsC;AACzC,SAAOC,KAAK,CAACF,IAAD,8kBAWmCC,QAXnC,yQAeiDA,QAfjD,yJAAZ;AAoBH;;AAGM,SAASI,oBAAT,CAA8BL,IAA9B,EAAoCM,MAApC,EAA4CL,QAA5C,EAAsD;AACzDK,EAAAA,MAAM,GAAGA,MAAM,CAACC,OAAP,CAAe,IAAf,EAAqB,IAArB,CAAT;AACA,SAAOL,KAAK,CAACF,IAAD,owBAWsCM,MAXtC,8LAayEL,QAbzE,kMAAZ;AAkBH;;AAGM,SAASO,cAAT,CAAwBR,IAAxB,EAA8BS,SAA9B,EAAyC;AAC5C,SAAOP,KAAK,CAACF,IAAD,6nCAcoCS,SAdpC,8dAAZ;AAqBH;;AAGD,SAASP,KAAT,CAAeF,IAAf,EAAqBU,WAArB,EAAkC;AAC9B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCb,IAAAA,IAAI,CAACc,OAAL,GAAeC,IAAf,CAAoB,UAACC,MAAD,EAAY;AAC5BA,MAAAA,MAAM,CAACd,KAAP,CAAaQ,WAAb,EAA0B,UAACO,UAAD,EAAaC,QAAb,EAA0B;AAChDF,QAAAA,MAAM,CAACG,OAAP;;AACA,YAAIF,UAAJ,EAAgB;AACZJ,UAAAA,MAAM,CAACI,UAAD,CAAN;AACH,SAFD,MAEO;AACH,cAAMG,OAAO,GAAGF,QAAQ,CAACG,IAAzB;AACAT,UAAAA,OAAO,CAACQ,OAAD,CAAP;AACH;AACJ,OARD;AASH,KAVD,EAUGE,KAVH,CAUS;AAAA,aAAMC,OAAO,CAACC,GAAR,CAAY,kBAAZ,CAAN;AAAA,KAVT;AAWH,GAZM,CAAP;AAaH","sourcesContent":["export function getAllSongs(pool, artistId) {\n    return query(pool, `\n        SELECT \"Song\".name as name, COUNT(*) as times_played, \"Song\".id as song_id\n        FROM \"Song\", (\n            SElECT \"Set_Song\".song_id as id\n            FROM \"Set_Song\", (\n                SELECT \"Set\".id\n                FROM \"Set\", (\n                    SELECT \"Setlist\".id as id\n                    FROM \"Setlist\"\n                    WHERE \"Setlist\".artist_id = '${artistId}') as artists_setlists\n                WHERE \"Set\".setlist_id = artists_setlists.id) as set_ids\n            WHERE set_ids.id = \"Set_Song\".set_id ) as song_ids\n        WHERE \"Song\".id = song_ids.id\n        GROUP BY name, song_id\n        ORDER BY times_played DESC\n    `);\n}\n\n\nexport function getAllOriginals(pool, artistId) {\n    return query(pool, `\n        SELECT \"Song\".name as name, COUNT(*) as times_played, \"Song\".id as song_id\n        FROM \"Song\", (\n            SElECT \"Set_Song\".song_id as id\n            FROM \"Set_Song\", (\n                SELECT \"Set\".id\n                FROM \"Set\", (\n                    SELECT \"Setlist\".id as id\n                    FROM \"Setlist\"\n                    WHERE \"Setlist\".artist_id = '${artistId}') as artists_setlists\n                WHERE \"Set\".setlist_id = artists_setlists.id) as set_ids\n            WHERE set_ids.id = \"Set_Song\".set_id ) as song_ids\n        WHERE \"Song\".id = song_ids.id AND \"Song\".artist_id = '${artistId}'\n        GROUP BY name, song_id\n        ORDER BY times_played DESC\n    `);\n}\n\n\nexport function getAllCovers(pool, artistId) {\n    return query(pool, `\n    SELECT name_ids.name as name, \"Artist\".name as artist_name, name_ids.times_played, name_ids.song_id as song_id\n    FROM \"Artist\", (\n        SELECT \"Song\".name as name, \"Song\".artist_id as artist_id, COUNT(*) as times_played, \"Song\".id as song_id\n        FROM \"Song\", (\n            SElECT \"Set_Song\".song_id as id\n            FROM \"Set_Song\", (\n                SELECT \"Set\".id\n                FROM \"Set\", (\n                    SELECT \"Setlist\".id as id\n                    FROM \"Setlist\"\n                    WHERE \"Setlist\".artist_id = '${artistId}' \n                ) as artists_setlists\n                WHERE \"Set\".setlist_id = artists_setlists.id) as set_ids\n            WHERE set_ids.id = \"Set_Song\".set_id ) as song_ids\n        WHERE \"Song\".id = song_ids.id AND \"Song\".artist_id != '${artistId}'\n        GROUP BY name, artist_id, song_id\n        ORDER BY times_played DESC) as name_ids\n    WHERE \"Artist\".mbid = name_ids.artist_id\n    `);\n}\n\n\nexport function getAllSetlistsBySong(pool, songId, artistId) {\n    songId = songId.replace(/'/g, \"''\");\n    return query(pool, `\n        SELECT venue_info.event_date, venue_info.tour_name, venue_info.id, venue_info.venue_name, \"City\".name as city_name, \"City\".state, \"City\".country_name\n        FROM \"City\", (\n            SELECT setlist_info.event_date, setlist_info.tour_name, setlist_info.id, \"Venue\".name as venue_name, \"Venue\".city_id\n            FROM \"Venue\", (\n                SELECT \"Setlist\".event_date, \"Setlist\".tour_name, \"Setlist\".venue_id, \"Setlist\".id\n                FROM \"Setlist\", (\n                    SELECT \"Set\".setlist_id as setlist_id\n                    FROM \"Set\", (\n                        SELECT \"Set_Song\".set_id as set_id\n                        FROM \"Set_Song\"\n                        WHERE \"Set_Song\".song_id = '${songId}') as set_ids\n                    WHERE set_ids.set_id = \"Set\".id) as setlist_ids\n                WHERE \"Setlist\".id = setlist_ids.setlist_id AND \"Setlist\".artist_id = '${artistId}') as setlist_info\n            WHERE \"Venue\".id = setlist_info.venue_id) as venue_info\n        WHERE \"City\".id = venue_info.city_id\n        ORDER BY venue_info.event_date DESC\n    `);\n}\n\n\nexport function getSetlistInfo(pool, setlistId) {\n    return query(pool, `\n        SELECT \"Song\".name as song_name, \"Artist\".name as song_artist_name, songs.event_date, songs.tour_name, songs.url, songs.name as set_name, songs.infos, songs.artist_name, songs.city_name,\n            songs.state, songs.country_name, songs.venue_name, songs.info, songs.latitude, songs.longitude, songs.song_id\n        FROM \"Song\", \"Artist\", (\n            SELECT \"Set_Song\".song_id, infos.*\n            FROM \"Set_Song\", (\n                SELECT set_infos.*, \"Artist\".name as artist_name, \"Venue\".name as venue_name, \"City\".name as city_name, \"City\".state, \"City\".country_name, \"City\".latitude, \"City\".longitude\n                FROM \"Artist\", \"Venue\", \"City\", (\n                    SELECT sets_setlists.*\n                    FROM \"Venue\", (\n                        SELECT setlist.event_date, setlist.artist_id, setlist.tour_name, setlist.info, setlist.url, setlist.venue_id, \"Set\".id as set_id, \"Set\".*\n                        FROM \"Set\", (\n                            SELECT * \n                            FROM \"Setlist\" \n                            WHERE \"Setlist\".id = '${setlistId}') as setlist\n                        WHERE \"Set\".setlist_id = setlist.id) as sets_setlists\n                    WHERE \"Venue\".id = sets_setlists.venue_id) as set_infos\n                WHERE \"Artist\".mbid = set_infos.artist_id AND \"Venue\".id = set_infos.venue_id AND \"Venue\".city_id = \"City\".id) as infos\n            WHERE \"Set_Song\".set_id = infos.set_id) as songs\n        WHERE \"Song\".id = songs.song_id AND \"Song\".artist_id = \"Artist\".mbid\n    `);\n}\n\n\nfunction query(pool, queryString) {\n    return new Promise((resolve, reject) => {\n        pool.connect().then((client) => {\n            client.query(queryString, (queryError, response) => {\n                client.release();\n                if (queryError) {\n                    reject(queryError);\n                } else {\n                    const results = response.rows;\n                    resolve(results);\n                }\n            });\n        }).catch(() => console.log(\"Connection error\"));\n    });\n}\n"],"file":"database_queries.js"}