{"version":3,"sources":["../../src/database_queries.js"],"names":["getAllSongs","pool","artistId","query","getAllOriginals","getAllCovers","queryString","Promise","resolve","reject","connect","then","client","queryError","response","release","results","rows","catch","console","log"],"mappings":";;;;;;;;;AAAO,SAASA,WAAT,CAAqBC,IAArB,EAA2BC,QAA3B,EAAqC;AACxC,SAAOC,KAAK,CAACF,IAAD,uYASmCC,QATnC,oRAAZ;AAgBH;;AAGM,SAASE,eAAT,CAAyBH,IAAzB,EAA+BC,QAA/B,EAAyC;AAC5C,SAAOC,KAAK,CAACF,IAAD,uYASmCC,QATnC,qPAYgDA,QAZhD,wEAAZ;AAgBH;;AAGM,SAASG,YAAT,CAAsBJ,IAAtB,EAA4BC,QAA5B,EAAsC;AACzC,SAAOC,KAAK,CAACF,IAAD,yhBAWmCC,QAXnC,yQAeiDA,QAfjD,gJAAZ;AAoBH;;AAGD,SAASC,KAAT,CAAeF,IAAf,EAAqBK,WAArB,EAAkC;AAC9B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCR,IAAAA,IAAI,CAACS,OAAL,GAAeC,IAAf,CAAoB,UAACC,MAAD,EAAY;AAC5BA,MAAAA,MAAM,CAACT,KAAP,CAAaG,WAAb,EAA0B,UAACO,UAAD,EAAaC,QAAb,EAA0B;AAChDF,QAAAA,MAAM,CAACG,OAAP;;AACA,YAAIF,UAAJ,EAAgB;AACZJ,UAAAA,MAAM,CAACI,UAAD,CAAN;AACH,SAFD,MAEO;AACH,cAAMG,OAAO,GAAGF,QAAQ,CAACG,IAAzB;AACAT,UAAAA,OAAO,CAACQ,OAAD,CAAP;AACH;AACJ,OARD;AASH,KAVD,EAUGE,KAVH,CAUS;AAAA,aAAMC,OAAO,CAACC,GAAR,CAAY,kBAAZ,CAAN;AAAA,KAVT;AAWH,GAZM,CAAP;AAaH","sourcesContent":["export function getAllSongs(pool, artistId) {\n    return query(pool, `\n        SELECT \"Song\".name as name, COUNT(*) as times_played\n        FROM \"Song\", (\n            SElECT \"Set_Song\".song_id as id\n            FROM \"Set_Song\", (\n                SELECT \"Set\".id\n                FROM \"Set\", (\n                    SELECT \"Setlist\".id as id\n                    FROM \"Setlist\"\n                    WHERE \"Setlist\".artist_id = '${artistId}') as artists_setlists\n                WHERE \"Set\".setlist_id = artists_setlists.id) as set_ids\n            WHERE set_ids.id = \"Set_Song\".set_id ) as song_ids\n        WHERE \"Song\".id = song_ids.id\n        GROUP BY name\n        ORDER BY times_played DESC\n    `);\n}\n\n\nexport function getAllOriginals(pool, artistId) {\n    return query(pool, `\n        SELECT \"Song\".name as name, COUNT(*) as times_played\n        FROM \"Song\", (\n            SElECT \"Set_Song\".song_id as id\n            FROM \"Set_Song\", (\n                SELECT \"Set\".id\n                FROM \"Set\", (\n                    SELECT \"Setlist\".id as id\n                    FROM \"Setlist\"\n                    WHERE \"Setlist\".artist_id = '${artistId}') as artists_setlists\n                WHERE \"Set\".setlist_id = artists_setlists.id) as set_ids\n            WHERE set_ids.id = \"Set_Song\".set_id ) as song_ids\n        WHERE \"Song\".id = song_ids.id AND \"Song\".artist_id = '${artistId}'\n        GROUP BY name\n        ORDER BY times_played DESC\n    `);\n}\n\n\nexport function getAllCovers(pool, artistId) {\n    return query(pool, `\n    SELECT name_ids.name as name, \"Artist\".name as artist_name, name_ids.times_played\n    FROM \"Artist\", (\n        SELECT \"Song\".name as name, \"Song\".artist_id as artist_id, COUNT(*) as times_played\n        FROM \"Song\", (\n            SElECT \"Set_Song\".song_id as id\n            FROM \"Set_Song\", (\n                SELECT \"Set\".id\n                FROM \"Set\", (\n                    SELECT \"Setlist\".id as id\n                    FROM \"Setlist\"\n                    WHERE \"Setlist\".artist_id = '${artistId}' \n                ) as artists_setlists\n                WHERE \"Set\".setlist_id = artists_setlists.id) as set_ids\n            WHERE set_ids.id = \"Set_Song\".set_id ) as song_ids\n        WHERE \"Song\".id = song_ids.id AND \"Song\".artist_id != '${artistId}'\n        GROUP BY name, artist_id\n        ORDER BY times_played DESC) as name_ids\n    WHERE \"Artist\".mbid = name_ids.artist_id\n    `);\n}\n\n\nfunction query(pool, queryString) {\n    return new Promise((resolve, reject) => {\n        pool.connect().then((client) => {\n            client.query(queryString, (queryError, response) => {\n                client.release();\n                if (queryError) {\n                    reject(queryError);\n                } else {\n                    const results = response.rows;\n                    resolve(results);\n                }\n            });\n        }).catch(() => console.log(\"Connection error\"));\n    });\n}\n"],"file":"database_queries.js"}