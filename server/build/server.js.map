{"version":3,"sources":["../server.js"],"names":["client","key","mapsKey","Promise","rate","limit","app","pool","DbConfig","use","express","json","credentials","origin","post","req","res","artistId","params","status","send","get","allSongs","allOriginals","allCovers","promises","catch","error","console","log","then","songs","push","originals","covers","all","artistName","artists","sortArtists","firstArtist","secondArtist","first","name","second","hasData","localeCompare","sort","query","queryResponse","rows","songId","setlists","setlistId","setlist","exitHandler","end","listen"],"mappings":"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","sourcesContent":["import express from 'express';\nimport loadSetlists from \"./src/load_setlists\";\nimport {DbConfig, mapsKey} from \"./src/keys\";\nimport {Pool} from 'pg';\nimport searchArtist from \"./src/search_artist\";\nimport {getAllCovers, getAllOriginals, getAllSetlistsBySong, getAllSongs, getSetlistInfo} from './src/database_queries';\nimport \"@babel/polyfill\";\nimport cors from 'cors';\n\nimport {createClient} from '@google/maps'\n\nconst client = createClient({\n    key: mapsKey,\n    Promise: Promise,\n    rate: {limit: 50},\n});\n\nconst app = express();\n\nconst pool = Pool(DbConfig); app.use(express.json());\n\napp.use(cors({\n    credentials: true,\n    origin: true,\n}));\n\n// Download data\napp.post('/artist/:artistId', (req, res) => {\n    const artistId = req.params.artistId;\n    loadSetlists(artistId, pool);\n    return res.status(200).send(\"Downloading \" + artistId + \" data...\");\n});\n\n// Get song data\napp.get('/artist/:artistId/', async (req, res) => {\n    const artistId = req.params.artistId;\n    let allSongs = [];\n    let allOriginals = [];\n    let allCovers = [];\n    const promises = [\n        getAllSongs(pool, artistId)\n            .catch((error) => console.log(error))\n            .then((songs) => {\n                allSongs.push(...songs);\n            }),\n        getAllOriginals(pool, artistId)\n            .catch((error) => console.log(error))\n            .then((originals) => {\n                allOriginals.push(...originals);\n            }),\n        getAllCovers(pool, artistId)\n            .catch((error) => console.log(error))\n            .then((covers) => {\n                allCovers.push(...covers);\n            })\n    ];\n    await Promise.all(promises);\n    return res.status(200).send({\n        songs: allSongs,\n        covers: allCovers,\n        originals: allOriginals,\n    });\n});\n\n// Search for an artist\napp.get('/search/artists/:artistName', async (req, res) => {\n    const artistName = req.params.artistName;\n    const artists = await searchArtist(artistName, pool).catch((error) => console.log(error));\n    console.log(artists);\n    const sortArtists = (firstArtist, secondArtist) => {\n        const first = firstArtist.name;\n        const second = secondArtist.name;\n        if (first === artistName) {\n            return -1;\n        } else if (second === artistName) {\n            return 1;\n        } else if (first.hasData && second.hasData) {\n            return first.localeCompare(second);\n        } else if (first.hasData) {\n            return -1;\n        } else if (second.hasData) {\n            return 1;\n        } else {\n            return first.localeCompare(first);\n        }\n    };\n    if (artists) {\n        artists.sort(sortArtists);\n    }\n    return res.status(200).send(artists);\n});\n\n// Get an artist's name from their id\napp.get('/artist/:artistId/name', async (req, res) => {\n    const artistId = req.params.artistId;\n    const queryResponse = await pool.query(`SELECT \"Artist\".name FROM \"Artist\" WHERE \"Artist\".mbid = '${artistId}'`);\n    const artistName = (queryResponse.rows && queryResponse.rows[0] && queryResponse.rows[0].name) || \"\";\n    return res.status(200).send(artistName);\n});\n\n// Get setlist info for a given song played by an artist\napp.get('/artist/:artistId/song/:songId', async (req, res) => {\n    const artistId = req.params.artistId;\n    const songId = req.params.songId;\n    const setlists = await getAllSetlistsBySong(pool, songId, artistId);\n    return res.status(200).send(setlists);\n});\n\n// Get information about a setlist\napp.get('/setlist/:setlistId', async (req, res) => {\n    const setlistId = req.params.setlistId;\n    const setlist = await getSetlistInfo(pool, setlistId);\n    // const search = await client.geocode({address: '26777 Rose Terrace Ct., Tower Lakes, IL'}).asPromise();//.catch((err) => console.log(err));\n    // console.log(search);\n    return res.status(200).send(setlist);\n});\n\napp.get('/artist/:artistId/venue-locations', (req, res) => {\n    const artistId = req.params.artistId;\n    return res.status(200).send(\"Ok\");\n});\n\napp.get('/artist/:artistId/typical-concert', (req, res) => {\n    const artistId = req.params.artistId;\n    return res.status(200).send(\"Ok\");\n});\n\napp.get('/artist/:artistId/locations', (req, res) => {\n    const artistId = req.params.artistId;\n    return res.status(200).send(\"Ok\");\n});\n\napp.get('/artist/:artistId/songs', (req, res) => {\n    const artistId = req.params.artistId;\n    return res.status(200).send(\"Ok\");\n});\n\napp.get('/artist/:artistId/covers', (req, res) => {\n    const artistId = req.params.artistId;\n    return res.status(200).send(\"Ok\");\n});\n\napp.get('/artist/:artistId/tours', (req, res) => {\n    const artistId = req.params.artistId;\n    return res.status(200).send(\"Ok\");\n});\n\napp.get('/artist/:artistId/venues', (req, res) => {\n    const artistId = req.params.artistId;\n    return res.status(200).send(\"Ok\");\n});\n\napp.get('/artist/:artistId/songs_by', (req, res) => {\n    const artistId = req.params.artistId;\n    return res.status(200).send(\"Ok\");\n});\n\nconst exitHandler = () => {\n    pool.end();\n    console.log(\"Exiting\")\n};\n\n// process.on('exit', exitHandler);\n// process.on('SIGINT', exitHandler);\n// process.on('SIGUSR1', exitHandler);\n// process.on('SIGUSR2', exitHandler);\n// process.on('uncaughtException', exitHandler);\n\napp.listen(3001);\nconsole.log('app running on port.', 3001);\n"],"file":"server.js"}